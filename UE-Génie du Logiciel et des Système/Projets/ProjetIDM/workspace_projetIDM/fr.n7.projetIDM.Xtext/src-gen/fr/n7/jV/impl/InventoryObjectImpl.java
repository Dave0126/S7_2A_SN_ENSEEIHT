/**
 * generated by Xtext 2.23.0
 */
package fr.n7.jV.impl;

import fr.n7.jV.Condition;
import fr.n7.jV.InventoryObject;
import fr.n7.jV.JVPackage;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Inventory Object</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link fr.n7.jV.impl.InventoryObjectImpl#getTransformationCondition <em>Transformation Condition</em>}</li>
 *   <li>{@link fr.n7.jV.impl.InventoryObjectImpl#getObjectAfterTransformationID <em>Object After Transformation ID</em>}</li>
 *   <li>{@link fr.n7.jV.impl.InventoryObjectImpl#getSize <em>Size</em>}</li>
 * </ul>
 *
 * @generated
 */
public class InventoryObjectImpl extends PrizeImpl implements InventoryObject
{
  /**
   * The cached value of the '{@link #getTransformationCondition() <em>Transformation Condition</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTransformationCondition()
   * @generated
   * @ordered
   */
  protected EList<Condition> transformationCondition;

  /**
   * The default value of the '{@link #getObjectAfterTransformationID() <em>Object After Transformation ID</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getObjectAfterTransformationID()
   * @generated
   * @ordered
   */
  protected static final String OBJECT_AFTER_TRANSFORMATION_ID_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getObjectAfterTransformationID() <em>Object After Transformation ID</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getObjectAfterTransformationID()
   * @generated
   * @ordered
   */
  protected String objectAfterTransformationID = OBJECT_AFTER_TRANSFORMATION_ID_EDEFAULT;

  /**
   * The default value of the '{@link #getSize() <em>Size</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSize()
   * @generated
   * @ordered
   */
  protected static final int SIZE_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getSize() <em>Size</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSize()
   * @generated
   * @ordered
   */
  protected int size = SIZE_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected InventoryObjectImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return JVPackage.Literals.INVENTORY_OBJECT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Condition> getTransformationCondition()
  {
    if (transformationCondition == null)
    {
      transformationCondition = new EObjectContainmentEList<Condition>(Condition.class, this, JVPackage.INVENTORY_OBJECT__TRANSFORMATION_CONDITION);
    }
    return transformationCondition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getObjectAfterTransformationID()
  {
    return objectAfterTransformationID;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setObjectAfterTransformationID(String newObjectAfterTransformationID)
  {
    String oldObjectAfterTransformationID = objectAfterTransformationID;
    objectAfterTransformationID = newObjectAfterTransformationID;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, JVPackage.INVENTORY_OBJECT__OBJECT_AFTER_TRANSFORMATION_ID, oldObjectAfterTransformationID, objectAfterTransformationID));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int getSize()
  {
    return size;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSize(int newSize)
  {
    int oldSize = size;
    size = newSize;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, JVPackage.INVENTORY_OBJECT__SIZE, oldSize, size));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case JVPackage.INVENTORY_OBJECT__TRANSFORMATION_CONDITION:
        return ((InternalEList<?>)getTransformationCondition()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case JVPackage.INVENTORY_OBJECT__TRANSFORMATION_CONDITION:
        return getTransformationCondition();
      case JVPackage.INVENTORY_OBJECT__OBJECT_AFTER_TRANSFORMATION_ID:
        return getObjectAfterTransformationID();
      case JVPackage.INVENTORY_OBJECT__SIZE:
        return getSize();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case JVPackage.INVENTORY_OBJECT__TRANSFORMATION_CONDITION:
        getTransformationCondition().clear();
        getTransformationCondition().addAll((Collection<? extends Condition>)newValue);
        return;
      case JVPackage.INVENTORY_OBJECT__OBJECT_AFTER_TRANSFORMATION_ID:
        setObjectAfterTransformationID((String)newValue);
        return;
      case JVPackage.INVENTORY_OBJECT__SIZE:
        setSize((Integer)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case JVPackage.INVENTORY_OBJECT__TRANSFORMATION_CONDITION:
        getTransformationCondition().clear();
        return;
      case JVPackage.INVENTORY_OBJECT__OBJECT_AFTER_TRANSFORMATION_ID:
        setObjectAfterTransformationID(OBJECT_AFTER_TRANSFORMATION_ID_EDEFAULT);
        return;
      case JVPackage.INVENTORY_OBJECT__SIZE:
        setSize(SIZE_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case JVPackage.INVENTORY_OBJECT__TRANSFORMATION_CONDITION:
        return transformationCondition != null && !transformationCondition.isEmpty();
      case JVPackage.INVENTORY_OBJECT__OBJECT_AFTER_TRANSFORMATION_ID:
        return OBJECT_AFTER_TRANSFORMATION_ID_EDEFAULT == null ? objectAfterTransformationID != null : !OBJECT_AFTER_TRANSFORMATION_ID_EDEFAULT.equals(objectAfterTransformationID);
      case JVPackage.INVENTORY_OBJECT__SIZE:
        return size != SIZE_EDEFAULT;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (ObjectAfterTransformationID: ");
    result.append(objectAfterTransformationID);
    result.append(", size: ");
    result.append(size);
    result.append(')');
    return result.toString();
  }

} //InventoryObjectImpl
