/*
 * generated by Xtext 2.23.0
 */
package fr.n7.serializer;

import com.google.inject.Inject;
import fr.n7.jV.Description;
import fr.n7.jV.Game;
import fr.n7.jV.InventoryObject;
import fr.n7.jV.JVPackage;
import fr.n7.jV.Knowledge;
import fr.n7.jV.KnowledgeCondition;
import fr.n7.jV.ObjectCondition;
import fr.n7.jV.OptionalText;
import fr.n7.jV.Path;
import fr.n7.jV.Person;
import fr.n7.jV.Places;
import fr.n7.services.JVGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class JVSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private JVGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == JVPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case JVPackage.ACTION:
				sequence_Action(context, (fr.n7.jV.Action) semanticObject); 
				return; 
			case JVPackage.DESCRIPTION:
				sequence_Description(context, (Description) semanticObject); 
				return; 
			case JVPackage.GAME:
				sequence_Game(context, (Game) semanticObject); 
				return; 
			case JVPackage.INVENTORY_OBJECT:
				sequence_InventoryObject(context, (InventoryObject) semanticObject); 
				return; 
			case JVPackage.KNOWLEDGE:
				if (rule == grammarAccess.getKnowledgeRule()) {
					sequence_Knowledge(context, (Knowledge) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getPrizeRule()) {
					sequence_Knowledge_Prize(context, (Knowledge) semanticObject); 
					return; 
				}
				else break;
			case JVPackage.KNOWLEDGE_CONDITION:
				sequence_KnowledgeCondition(context, (KnowledgeCondition) semanticObject); 
				return; 
			case JVPackage.OBJECT_CONDITION:
				sequence_ObjectCondition(context, (ObjectCondition) semanticObject); 
				return; 
			case JVPackage.OPTIONAL_TEXT:
				sequence_OptionalText(context, (OptionalText) semanticObject); 
				return; 
			case JVPackage.PATH:
				if (rule == grammarAccess.getGameElementRule()) {
					sequence_GameElement_Path(context, (Path) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getPathRule()) {
					sequence_Path(context, (Path) semanticObject); 
					return; 
				}
				else break;
			case JVPackage.PERSON:
				sequence_Person(context, (Person) semanticObject); 
				return; 
			case JVPackage.PLACES:
				sequence_Places(context, (Places) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Action returns Action
	 *
	 * Constraint:
	 *     (
	 *         (displayCondition+=Condition+ ((condition+=Condition+ consumedID+=STRING+) | consumedID+=STRING+)) | 
	 *         (
	 *             ((displayCondition+=Condition+ endCondition+=Condition+) | endCondition+=Condition+) 
	 *             ((condition+=Condition+ consumedID+=STRING+) | consumedID+=STRING+)
	 *         ) | 
	 *         (
	 *             (
	 *                 (displayCondition+=Condition+ ((endCondition+=Condition+ condition+=Condition+) | condition+=Condition+)) | 
	 *                 (endCondition+=Condition+ condition+=Condition+) | 
	 *                 condition+=Condition+
	 *             )? 
	 *             prizesID+=STRING+ 
	 *             consumedID+=STRING+
	 *         ) | 
	 *         (condition+=Condition+ consumedID+=STRING+) | 
	 *         consumedID+=STRING+
	 *     )?
	 */
	protected void sequence_Action(ISerializationContext context, fr.n7.jV.Action semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Description returns Description
	 *
	 * Constraint:
	 *     (text=STRING optionalText+=OptionalText*)
	 */
	protected void sequence_Description(ISerializationContext context, Description semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     GameElement returns Path
	 *
	 * Constraint:
	 *     (
	 *         id=STRING 
	 *         open+=Condition* 
	 *         visible+=Condition* 
	 *         mandatory=BOOLEAN 
	 *         prizesID+=STRING* 
	 *         consumedID+=STRING* 
	 *         description=Description?
	 *     )
	 */
	protected void sequence_GameElement_Path(ISerializationContext context, Path semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Game returns Game
	 *
	 * Constraint:
	 *     (name=ID inventorySize=INT gameElements+=GameElement* objects+=Prize*)
	 */
	protected void sequence_Game(ISerializationContext context, Game semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Prize returns InventoryObject
	 *     InventoryObject returns InventoryObject
	 *
	 * Constraint:
	 *     (id=STRING transformationCondition+=Condition* ObjectAfterTransformationID=STRING? size=INT description=Description)
	 */
	protected void sequence_InventoryObject(ISerializationContext context, InventoryObject semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Condition returns KnowledgeCondition
	 *     KnowledgeCondition returns KnowledgeCondition
	 *
	 * Constraint:
	 *     knowledgeRequiredID=STRING
	 */
	protected void sequence_KnowledgeCondition(ISerializationContext context, KnowledgeCondition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JVPackage.Literals.KNOWLEDGE_CONDITION__KNOWLEDGE_REQUIRED_ID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JVPackage.Literals.KNOWLEDGE_CONDITION__KNOWLEDGE_REQUIRED_ID));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getKnowledgeConditionAccess().getKnowledgeRequiredIDSTRINGTerminalRuleCall_1_0(), semanticObject.getKnowledgeRequiredID());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Knowledge returns Knowledge
	 *
	 * Constraint:
	 *     (id=STRING description=Description)
	 */
	protected void sequence_Knowledge(ISerializationContext context, Knowledge semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JVPackage.Literals.PRIZE__ID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JVPackage.Literals.PRIZE__ID));
			if (transientValues.isValueTransient(semanticObject, JVPackage.Literals.PRIZE__DESCRIPTION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JVPackage.Literals.PRIZE__DESCRIPTION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getKnowledgeAccess().getIdSTRINGTerminalRuleCall_1_0(), semanticObject.getId());
		feeder.accept(grammarAccess.getKnowledgeAccess().getDescriptionDescriptionParserRuleCall_2_0(), semanticObject.getDescription());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Prize returns Knowledge
	 *
	 * Constraint:
	 *     (id=STRING description=Description visible=Condition* condition+=Condition*)
	 */
	protected void sequence_Knowledge_Prize(ISerializationContext context, Knowledge semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Condition returns ObjectCondition
	 *     ObjectCondition returns ObjectCondition
	 *
	 * Constraint:
	 *     (objectRequiredID=STRING amount=INT? minAmount=INT? maxAmount=INT?)
	 */
	protected void sequence_ObjectCondition(ISerializationContext context, ObjectCondition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     OptionalText returns OptionalText
	 *
	 * Constraint:
	 *     (condition+=Condition* text=STRING)
	 */
	protected void sequence_OptionalText(ISerializationContext context, OptionalText semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Path returns Path
	 *
	 * Constraint:
	 *     (
	 *         id=STRING 
	 *         open+=Condition* 
	 *         visible+=Condition* 
	 *         mandatory=BOOLEAN 
	 *         prizesID+=STRING* 
	 *         consumedID+=STRING*
	 *     )
	 */
	protected void sequence_Path(ISerializationContext context, Path semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Person returns Person
	 *
	 * Constraint:
	 *     (id=STRING visible=BOOLEAN mandatory=BOOLEAN actions+=Action+)
	 */
	protected void sequence_Person(ISerializationContext context, Person semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     GameElement returns Places
	 *     Places returns Places
	 *
	 * Constraint:
	 *     (
	 *         id=STRING 
	 *         start=BOOLEAN 
	 *         finish=BOOLEAN 
	 *         persons+=Person* 
	 *         prizesID+=STRING* 
	 *         pathsID+=STRING*
	 *     )
	 */
	protected void sequence_Places(ISerializationContext context, Places semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
