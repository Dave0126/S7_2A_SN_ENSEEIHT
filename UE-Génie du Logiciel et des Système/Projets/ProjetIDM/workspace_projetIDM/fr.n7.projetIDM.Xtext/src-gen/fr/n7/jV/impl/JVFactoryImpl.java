/**
 * generated by Xtext 2.23.0
 */
package fr.n7.jV.impl;

import fr.n7.jV.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class JVFactoryImpl extends EFactoryImpl implements JVFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static JVFactory init()
  {
    try
    {
      JVFactory theJVFactory = (JVFactory)EPackage.Registry.INSTANCE.getEFactory(JVPackage.eNS_URI);
      if (theJVFactory != null)
      {
        return theJVFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new JVFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public JVFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case JVPackage.GAME: return createGame();
      case JVPackage.DESCRIPTION: return createDescription();
      case JVPackage.OPTIONAL_TEXT: return createOptionalText();
      case JVPackage.GAME_ELEMENT: return createGameElement();
      case JVPackage.PLACES: return createPlaces();
      case JVPackage.PRIZE: return createPrize();
      case JVPackage.CONDITION: return createCondition();
      case JVPackage.OBJECT_CONDITION: return createObjectCondition();
      case JVPackage.KNOWLEDGE_CONDITION: return createKnowledgeCondition();
      case JVPackage.PERSON: return createPerson();
      case JVPackage.ACTION: return createAction();
      case JVPackage.KNOWLEDGE: return createKnowledge();
      case JVPackage.PATH: return createPath();
      case JVPackage.INVENTORY_OBJECT: return createInventoryObject();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case JVPackage.BOOLEAN:
        return createBOOLEANFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case JVPackage.BOOLEAN:
        return convertBOOLEANToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Game createGame()
  {
    GameImpl game = new GameImpl();
    return game;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Description createDescription()
  {
    DescriptionImpl description = new DescriptionImpl();
    return description;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OptionalText createOptionalText()
  {
    OptionalTextImpl optionalText = new OptionalTextImpl();
    return optionalText;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public GameElement createGameElement()
  {
    GameElementImpl gameElement = new GameElementImpl();
    return gameElement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Places createPlaces()
  {
    PlacesImpl places = new PlacesImpl();
    return places;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Prize createPrize()
  {
    PrizeImpl prize = new PrizeImpl();
    return prize;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Condition createCondition()
  {
    ConditionImpl condition = new ConditionImpl();
    return condition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ObjectCondition createObjectCondition()
  {
    ObjectConditionImpl objectCondition = new ObjectConditionImpl();
    return objectCondition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public KnowledgeCondition createKnowledgeCondition()
  {
    KnowledgeConditionImpl knowledgeCondition = new KnowledgeConditionImpl();
    return knowledgeCondition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Person createPerson()
  {
    PersonImpl person = new PersonImpl();
    return person;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Action createAction()
  {
    ActionImpl action = new ActionImpl();
    return action;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Knowledge createKnowledge()
  {
    KnowledgeImpl knowledge = new KnowledgeImpl();
    return knowledge;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Path createPath()
  {
    PathImpl path = new PathImpl();
    return path;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public InventoryObject createInventoryObject()
  {
    InventoryObjectImpl inventoryObject = new InventoryObjectImpl();
    return inventoryObject;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BOOLEAN createBOOLEANFromString(EDataType eDataType, String initialValue)
  {
    BOOLEAN result = BOOLEAN.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertBOOLEANToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public JVPackage getJVPackage()
  {
    return (JVPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static JVPackage getPackage()
  {
    return JVPackage.eINSTANCE;
  }

} //JVFactoryImpl
