/**
 * generated by Xtext 2.23.0
 */
package fr.n7.jV.impl;

import fr.n7.jV.Game;
import fr.n7.jV.GameElement;
import fr.n7.jV.JVPackage;
import fr.n7.jV.Prize;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Game</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link fr.n7.jV.impl.GameImpl#getName <em>Name</em>}</li>
 *   <li>{@link fr.n7.jV.impl.GameImpl#getInventorySize <em>Inventory Size</em>}</li>
 *   <li>{@link fr.n7.jV.impl.GameImpl#getGameElements <em>Game Elements</em>}</li>
 *   <li>{@link fr.n7.jV.impl.GameImpl#getObjects <em>Objects</em>}</li>
 * </ul>
 *
 * @generated
 */
public class GameImpl extends MinimalEObjectImpl.Container implements Game
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The default value of the '{@link #getInventorySize() <em>Inventory Size</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getInventorySize()
   * @generated
   * @ordered
   */
  protected static final int INVENTORY_SIZE_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getInventorySize() <em>Inventory Size</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getInventorySize()
   * @generated
   * @ordered
   */
  protected int inventorySize = INVENTORY_SIZE_EDEFAULT;

  /**
   * The cached value of the '{@link #getGameElements() <em>Game Elements</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getGameElements()
   * @generated
   * @ordered
   */
  protected EList<GameElement> gameElements;

  /**
   * The cached value of the '{@link #getObjects() <em>Objects</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getObjects()
   * @generated
   * @ordered
   */
  protected EList<Prize> objects;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected GameImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return JVPackage.Literals.GAME;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, JVPackage.GAME__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int getInventorySize()
  {
    return inventorySize;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setInventorySize(int newInventorySize)
  {
    int oldInventorySize = inventorySize;
    inventorySize = newInventorySize;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, JVPackage.GAME__INVENTORY_SIZE, oldInventorySize, inventorySize));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<GameElement> getGameElements()
  {
    if (gameElements == null)
    {
      gameElements = new EObjectContainmentEList<GameElement>(GameElement.class, this, JVPackage.GAME__GAME_ELEMENTS);
    }
    return gameElements;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Prize> getObjects()
  {
    if (objects == null)
    {
      objects = new EObjectContainmentEList<Prize>(Prize.class, this, JVPackage.GAME__OBJECTS);
    }
    return objects;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case JVPackage.GAME__GAME_ELEMENTS:
        return ((InternalEList<?>)getGameElements()).basicRemove(otherEnd, msgs);
      case JVPackage.GAME__OBJECTS:
        return ((InternalEList<?>)getObjects()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case JVPackage.GAME__NAME:
        return getName();
      case JVPackage.GAME__INVENTORY_SIZE:
        return getInventorySize();
      case JVPackage.GAME__GAME_ELEMENTS:
        return getGameElements();
      case JVPackage.GAME__OBJECTS:
        return getObjects();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case JVPackage.GAME__NAME:
        setName((String)newValue);
        return;
      case JVPackage.GAME__INVENTORY_SIZE:
        setInventorySize((Integer)newValue);
        return;
      case JVPackage.GAME__GAME_ELEMENTS:
        getGameElements().clear();
        getGameElements().addAll((Collection<? extends GameElement>)newValue);
        return;
      case JVPackage.GAME__OBJECTS:
        getObjects().clear();
        getObjects().addAll((Collection<? extends Prize>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case JVPackage.GAME__NAME:
        setName(NAME_EDEFAULT);
        return;
      case JVPackage.GAME__INVENTORY_SIZE:
        setInventorySize(INVENTORY_SIZE_EDEFAULT);
        return;
      case JVPackage.GAME__GAME_ELEMENTS:
        getGameElements().clear();
        return;
      case JVPackage.GAME__OBJECTS:
        getObjects().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case JVPackage.GAME__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case JVPackage.GAME__INVENTORY_SIZE:
        return inventorySize != INVENTORY_SIZE_EDEFAULT;
      case JVPackage.GAME__GAME_ELEMENTS:
        return gameElements != null && !gameElements.isEmpty();
      case JVPackage.GAME__OBJECTS:
        return objects != null && !objects.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(", inventorySize: ");
    result.append(inventorySize);
    result.append(')');
    return result.toString();
  }

} //GameImpl
