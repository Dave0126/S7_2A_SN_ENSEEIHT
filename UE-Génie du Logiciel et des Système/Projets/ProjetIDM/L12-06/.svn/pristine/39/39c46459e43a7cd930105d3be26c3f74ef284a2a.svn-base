module Game2PetriNet;
create OUT: PetriNet from IN: JV;


helper context JV!GameElement
def: getGame(): JV!Game =
	JV!Game.allInstances()
		->select(p | p.gameElements->includes(self))
		->asSequence()->first();

helper context JV!GameElement
def: getPlaceDest(nom : String): JV!Place =
	JV!Game.allInstances()
		->select(p | p.gameElements->includes(self))
		->asSequence()->first()
		.gameElements->select(p | p->oclIsKindOf(Places) and p.paths->includes(nom));

rule Game2PetriNet {
	from game: JV!Game
	to
		pn: PetriNet!PetriNet (name <- game.name)
		-- TODO RÃ©cuperer inventorySize
}

rule InventoryObject2Petrinet {
	from io: JV!InventoryObject
	to 
		-- PLACES d'un InventoryObject
		p_quantite: PetriNet!Place(
			name <- io.id + '_quantite',
			marking <- 0,
			net <- io.getGame())
					
}

rule Knowledge2Petrinet {
	from k: JV!Knowledge
	to 
		-- PLACES d'un Knowledge
		p_quantite: PetriNet!Place(
			name <- k.id + '_quantite',
			marking <- 0,
			net <- k.getGame())
}

rule Places2PetrinetFinish {
	from p: JV!Places
	
	( p.finish )
	to 
		p_lieu: PetriNet!Place(
			name <- p.id + '_lieu',
			marking <- if p.start then 1 else 0 endif,
			net <- p.getGame()),
			
		p_finish: PetriNet!Place(
			name <- p.id + '_lieu_finish',
			marking <- 0,
			net <- p.getGame()),
			
		t_fin: petrinet!Transition(
			name <- p.id + '_lieu2finish')
						
}

rule Places2Petrinet {
	from p: JV!Places
		
	(not p.finish )
	to 
		p_lieu: PetriNet!Place(
			name <- p.id + '_lieu',
			marking <- if p.start then 1 else 0 endif,
			net <- p.getGame())		
}

rule Path2Petrinet {
	from p: JV!Path
	
	to
		t_path: petrinet!Transition(
			name <- p.id + '_lieu2lieu'),
			
		a_1: petrinet!Arc(
			source <- thisModule.resolveTemp(p.p_lieu, p.getPlace(p.id).get(1).id),
			destination <- t_path,
			weight <- 1),
			
		a_2: petrinet!Arc(
			source <- t_path,
			destination <- thisModule.resolveTemp(p.p_lieu, p.getPlace(p.id).get(0).id),
			weight <- 1),
			
		-- chemin dans l'autre sens	
		
		t_path2: petrinet!Transition(
			name <- p.id + '_lieu2lieu'),
			
		a_3: petrinet!Arc(
			source <- thisModule.resolveTemp(p.p_lieu, p.getPlace(p.id).get(0).id),
			destination <- t_path,
			weight <- 1),
			
		a_4: petrinet!Arc(
			source <- t_path,
			destination <- thisModule.resolveTemp(p.p_lieu, p.getPlace(p.id).get(1).id),
			weight <- 1),
		
