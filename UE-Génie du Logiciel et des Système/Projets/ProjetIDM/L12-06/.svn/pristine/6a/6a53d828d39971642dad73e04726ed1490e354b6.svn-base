import 'JV.ecore'

package jV

context Game 

-- Contrainte: Le nom du modèle n'est pas vide
inv NonNull_name('Le nom du modèle est nul'):
	self.name <> null
	
-- Contrainte: Il ne peut y avoir qu'un seul lieu de départ
inv UnSeulLieuDeDepart('Erreur: Il ne peut y avoir qu\'un seul lieu de départ '):
    self.gameElements->select(g : GameElement | g.oclIsKindOf(Places) and g.oclAsType(Places).start = BOOLEAN::TRUE)->size() < 2

-- Contrainte E3: Nombre limité d'objets
inv LimiteTailleInventaire('Erreur: le nombre d\'objets d\'un explorateur est supérieure à la limite '):
    (self.objects->select(p : Prize | p.oclIsKindOf(InventoryObject)))->size() <= self.inventorySize

-- Contrainte E6: Le nombre d’objets que peut posséder un explorateur est limité par la taille cumulée des objets possédés.
inv LimiteTailleObject('Erreur: la taille cumulée des objets d\'un explorateur est supérieure à la limite '):
    (self.objects->collect(p : Prize | if p.oclIsKindOf(InventoryObject) then p.oclAsType(InventoryObject).size else 0 endif))->sum() <= self.inventorySize
	
	
def: cherchePath(s : String):
	Sequence(Path) = self.gameElements-> select(e | e.oclIsKindOf(Path)) 
												    -> collect(e | e.oclAsType(Path))
												    -> select(p | p.id = s)
												    -> asSequence()												    

-- Contrainte E17: Il ne peut y avoir qu’un seul chemin obligatoire visible et ouvert par lieu.
inv UniqueCheminObligatoireVisible('Erreur : plusieurs chemins obligatoires visibles sont ouverts pour un même lieu'):
	self.gameElements->forAll(g : GameElement | if g.oclIsKindOf(Places) then 
		(g.oclAsType(Places).pathsID->collect(s : String| cherchePath(s)-> collect(path : Path | if path.mandatory = BOOLEAN::TRUE then 1 else 0 endif)))-> sum() < 2 
		else 
			true 
		endif
	)

context Game

-- Contrainte E26: Il ne peut y avoir qu’une seule personne obligatoire par lieu
def: cherchePlaces(): 
	Sequence(Places) = self.gameElements-> select(e2 | e2.oclIsKindOf(Places)) 
												    -> collect(e2 | e2.oclAsType(Places))
												    -> asSequence()
def: cherchePersonneObligatoire():
    Sequence(Person) = self.cherchePlaces() -> select( e2 | e2.oclIsKindOf(Person)) 
    										-> collect(e2 | e2.oclAsType(Person))
    										-> collect( e2 | e2.mandatory = BOOLEAN::TRUE)
    										-> asSequence()
												    

inv UneSeulePersonneObligatoire('Erreur : plusieurs personnes obligatoires sont présentes dans un même lieu'):
	self.gameElements->forAll(g : GameElement | if g.oclIsKindOf(Places) then
		g.oclAsType(Places).persons->select(p : Person| p.mandatory = BOOLEAN::TRUE)->size() < 2 
		else 
			true 
		endif
	)
	
endpackage
