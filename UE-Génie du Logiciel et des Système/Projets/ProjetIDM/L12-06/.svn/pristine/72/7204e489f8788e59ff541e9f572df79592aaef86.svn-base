import 'JV.ecore'

package jV

context Game 

-- Contrainte: Le nom du modèle n'est pas vide
inv NonNull_name('Le nom du modèle est nul'):
	self.name <> null

--context Game
-- Contrainte E6: Le nombre d’objets que peut posséder un explorateur est limité par la taille cumulée des objets possédés.
--inv LimiteTailleObject('Erreur: le nombre d\'objets d\'un explorateur est supérieure à la limite '):
	
	
context Game
def: cherchePath(): 
	Sequence(Path) = self.gameElements-> select(e | e.oclIsKindOf(Path)) 
												    -> collect(e | e.oclAsType(Path))
												    -> asSequence()
												    
def: cherchePathObligatoire(): 
	Sequence(Path) = self.cherchePath() -> select(e | e.mandatory = BOOLEAN::TRUE) 
												    -> collect(e | e.mandatory = BOOLEAN::TRUE)
												    -> asSequence()

-- Contrainte E17: Il ne peut y avoir qu’un seul chemin obligatoire visible et ouvert par lieu.
inv UniqueCheminObligatoireVisible('Erreur : plusieurs chemins obligatoires visibles sont ouverts pour un même lieu'): 
	let somme = self.cherchePathObligatoire() -> size() in somme < 2 

context Game
-- Contrainte E26: Il ne peut y avoir qu’une seule personne obligatoire par lieu
def: cherchePlaces(): 
	Sequence(Places) = self.gameElements-> select(e2 | e2.oclIsKindOf(Places)) 
												    -> collect(e2 | e2.oclAsType(Places))
												    -> asSequence()
def: cherchePersonneObligatoire():
    Sequence(Person) = self.cherchePlaces() -> select( e2 | e2.oclIsKindOf(Person)) 
    										-> collect(e2 | e2.oclAsType(Person))
    										-> collect( e2 | e2.mandatory = BOOLEAN::TRUE
    										-> asSequence()
    )
												    
inv UneSeulePersonneObligatoire('Erreur : plusieurs personnes obligatoires sont présentes dans un même lieu'): 
	let somme2 = self.cherchePersonneObligatoire() -> size() in somme2 < 2 
	
endpackage
