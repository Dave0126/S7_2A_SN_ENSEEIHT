import 'PetriNet.ecore'

package petrinet

/*vailde les nom de place */
context Place
inv validName('Invalid name: ' + self.name):
	self.name.matches('[A-Za-z_][A-Za-z0-9_]*')
inv deuxNomsDiffrentsDesPlaces ('This name of Place: ' + self.name + 'is been used !'):
	Place.allInstances()
		-> select ( p | p.name = self.name)
		-> size() = 1
	
/*deux noeuds differents =>deux noms diffrents */
context Node
inv deuxNomsDiffrentsDesNoeuds ('This name of Node: ' + self.name + 'is been used !'):
	Node.allInstances()
		-> select ( n | n.name = self.name)
		-> size() = 1

/*deux transitions differents =>deux noms diffrents */
context Transition
inv deuxNomsDiffrentsDesTransitions ('This name: ' + self.name + 'is been used !'):
	Transition.allInstances()
		-> select ( t | t.name = self.name)
		-> size() = 1

/*Un arc ne doit jamais relier deux places ou deux transitions */
context Arc
inv bienRelierEntrePlaceEtTransition ('This link is not correct, it should between Place and Transition.'):
	(self.source.oclIsTypeOf(Place)
		implies self.target.oclIsTypeOf(Transition)
	) and (
	self.source.oclIsTypeOf(Transition)
		implies self.target.oclIsTypeOf(Place)
	)

/* le jeton d'une place doit toujours etre positifs*/
context Place
inv jetonPositif('The token of Place should be positive'):
	self.marking >= 0
	
/* le poids d'un arc doit toujours etre positifs */
context Arc
inv poidsPositifs('The weight of Arc should be positive'):
	self.poid >= 0
endpackage