#OCL operation reference
#Ocl operations for type *Classifier*
allInstances_0 = Returns a Set containing all of the existing instances of the current classifier (along with instances of all its inherited classifiers).

#Ocl operations for type *OclAny*
oclAsType_1 = Returns self statically typed as typespec if it is an instance of this type. \n\
Note that this does not alter the runtime value of self, it only enables access to subtype operations. \n\
This operation allows users to cast self to another type. 
oclIsInvalid_0 = Returns true if self is equal to invalid. 
oclIsKindOf_1 = Returns true if the type of self corresponds to the type or supertype of typespec, false otherwise. \n\
This operation allows users to check the class hierarchy of self much like would an instanceof Java. 
oclIsTypeOf_1 = Returns true if the type of self is the same as typespec, or false otherwise. \n\
This operation allows users to check the exact class type of self.
oclIsUndefined_0 = Returns true if self is equal to invalid or null. 
<>_1 = Returns true if self is a different object from object. 
EQUALS_1 = Returns true if self is equal to object. \n\
For an unordered collection, it will check to see if both collection contains the same elements. \n\
For an ordered collection, it will check to see if both collection contains the same elements in the same order.
<_1 = Returns true if self is comparable to object and less than object. 
>_1 = Returns true if self is comparable to object and greater than object. 
<EQUALS_1 = Returns true if self is comparable to object and less than or equal to object. 
>EQUALS_1 = Returns true if self is comparable to object and greater than or equal to object. 

#Ocl operations for type *String*
concat_1 = Returns a string containing self followed by s. 
size_0 = Returns the number of characters composing self. 
substring_2 = Returns a string containing all characters from self starting from index lower up to index upper included. \n\
Both lower and upper parameters should be contained between 1 and self.size() included. lower cannot be greater than upper. 
toInteger_0 = Returns an Integer of value equal to self, or invalid if self does not represent an integer. 
toLower_0 = Returns self* with all characters converted to lowercase. 
toReal_0 = Returns a Real of value equal to self, or invalid if self does not represent a real. 
toUpper_0 = Returns self with all characters converted to uppercase. 

#Ocl operations for type *Number*
abs_0 = Returns the absolute value of self, self if it is already a positive number. 
floor_0 = Returns the integer part of self if it is a Real, self if it is an Integer. 
max_1 = Returns the greatest number between self and r. 
min_1 = Returns the lowest number between self and r. 
round_0 = Returns the nearest integer to self if it is a Real, self if it is an Integer. 
div_1 = Returns the integer quotient of the division of self by i. 
mod_1 = Returns the integer remainder of the division of self by i. 

#Ocl operations for type *Collection*
any_1 = Returns any element contained in self that validates the condition expr, null otherwise. \n\
Evaluation is shortcut as soon as an element validating expr is found. \n\
Note that the result of this on unordered collections will be random if more than one element validates expr. 
asBag_0 = Returns a Bag containing all elements of self. 
asOrderedSet_0 = Returns an OrderedSet containing all elements of self. \n\
Element ordering is preserved when possible. 
asSequence_0 = Returns a Sequence containing all elements of self. \n\
Element ordering is preserved when possible. 
asSet_0 = Returns a Set containing all elements of self. 
collect_1 = Returns a collection containing the result of applying expr on all elements contained in self. 
collectNested_1 = Returns a collection containing all the elements contained in self on which we applied the OclExpression expr. \n\
The results won't be flattened. \n\
The type of the resulting collection depends on the type of self.
count_1 = Returns how many times object is in the collection self. 
excludes_1 = Returns true if object is not contained in self, false otherwise. 
excludesAll_1 = Returns true if no element of c2 is contained in self, false otherwise. 
excluding_1 = Returns a collection containing all elements of self minus all occurences of object. 
exists_1 = Returns true if at least one element in self validates the condition expr, false otherwise. \n\
The evaluation stops as soon as one element validating expr is found. 
flatten_0 = Returns a collection containing all elements of self recursively flattened.
forAll_1 = Returns true if the all the elements contained in self validate the condition expr, false otherwise. 
includes_1 = Returns true if object is contained in self, false otherwise. 
includesAll_1 = Returns true if all element of c2* are contained in self, false otherwise. 
including_1 = Returns a collection containing all elements of self followed by object.
isEmpty_0 = Returns true if self is empty, false otherwise. 
isUnique_1 = Returns true if all elements contained in self evaluate to a distinct value for expr. 
notEmpty_0 = Returns true if self contains at least one element, false otherwise. 
one_1 = Returns true if there is only one element contained in self that validates the condition expr, false otherwise. 
product_1 = Returns a Set of Tuples which represents the cartesian product of self with c2. 
reject_1 = Returns a collection with all elements of self except for those who validate the OclExpression expr. 
select_1 = Returns a collection with all elements of self that validate the OclExpression expr. 
size_0 = Returns the number of elements contained in self. 
sortedBy_1 = Returns a sorted collection containing all elements from self sorted in accordance with the OclExpression expr. \n\
This can be used on all kind of collections yet will always yield a Sequence-typed result except for OrderedSet which returns an OrderedSet. 
sum_0 = Returns the sum of all elements contained in self if they support the '+' operation. 

#Ocl operations for type *Sequence*
append_1 = Returns a collection with the same type as self containing all elements of self followed by object. 
at_1 = Returns the element of self at the index position. 
first_0 = Returns the first element of self. 
indexOf_1 = Returns the position of object in sequence self. 
insertAt_2 = Returns a collection with the same type as self containing self with object inserted at the index position. 
last_0 = Returns the last element of self. 
prepend_1 = Returns a collection with the same type as self containing object followed by all elements of self. 
subSequence_2 = Returns a collection with the same type as self containing all elements of self between the positions 'startIndex' and 'endIndex'. 
union_1 = Returns a collection with the same type as self containing all elements of self followed by all elements of seq. 

#Ocl operations for type *Bag*
intersection_1 = Returns a collection with the same type as self containing all elements of self that are also contained by the other collection. 
union_1 = Returns a collection with the same type as self containing all elements of self and all elements of the other collection. 

#Ocl operations for type *OrderedSet*
subOrderedSet_2 = Returns an OrderedSet containing all elements of self between the positions startIndex and endIndex. 
symmetricDifference_1 = Returns a Set containing all of the elements of self and set that are not present in both. 

#Ocl operations for type *Boolean*
and_0 = and boolean evaluation
implies_0 = implies boolean evaluation
or_0 = or boolean evaluation
not_0 = not boolean evaluation
xor_0 = xor boolean evaluation

#Acceleo operationq reference

#Standard String Operations
first_1 = Returns the first n characters of self, or self if its size is less than n. 
index_1 = Returns the index of substring r in self, or -1 if self contains no occurrence of r. \n\
String indexes start at 1. Consequently the last character's index in a string is equal to the string's length. 
isAlpha_0 = Returns true if self consists only of alphabetical characters, false otherwise. 
isAlphanum_0 = Returns true if self consists only of alphanumeric characters, false otherwise. 
last_1 = Returns the last n characters of self, or self if its size is less than n.
strcmp_1 = Returns an integer that is either negative, zero or positive depending on whether s1 is alphabetically less than, equal to or greater than self. \n\
Note that upper case letters come before lower case ones, so that 'AA' is closer to 'AC' than it is to 'Ab'. 
strstr_1 = Searches for string r in self. Returns true if found, false otherwise. 
strtok_2 = Breaks self into a sequence of tokens, each of which delimited by any one of the characters in s1, and return the next element in this sequence. \n\
The parameter flag should be 0 when strtok is called for the first time and will reset the sequence, 1 subsequently so as to access the next element. 
substitute_2 = Substitutes substring r in self by substring t and returns the resulting string. Will return self if it contains no occurrence of the substring r.
toLowerFirst_0 = Creates a copy of self with its first character converted to lower case and returns it. 
toUpperFirst_0 = Creates a copy of self with its first character converted to upper case and returns it. 

#Standard Integer operations
toString_0 = Converts the self to a string. 

#Acceleo non standard operations reference
#Non-standard *String* operations
contains_1 = Returns true if self contains the substring substring, false otherwise. 
endsWith_1 = Returns true if self ends with the substring substring, false otherwise. 
equalsIgnoreCase_1 = Returns true if self is equal to the string other ignoring case considerations, otherwise returns false. \n\
Two strings are considered equal ignoring case if they are of the same length and corresponding characters in the two strings are equal ignoring case. 
lastIndex_1 = Returns the last index of substring r in self, or -1 if self contains no occurrence of *r*. \n\
Important: String indexes start at 1. \n\
Consequently the last character's index in a string is equal to the string's length. 
matches_1 = Returns true if self matches the given regular expression pattern regex, false otherwise. The regex engine used is that of your runtime JDK. \n\
The given pattern is passed "as is" to the method matches of the java class String. \n\
For more about regular expressions, please refer to the JDK API documentation. 
replace_2 = Substitutes the first occurrence of substring substring in self by substring replacement and returns the resulting string. \n\
Returns self if it contains no occurrence of substring. \n\
Note that both substring and replacement are treated as regular expressions.
replaceAll_2 = Substitutes all substrings substring in self by substring replacement and returns the resulting string. \n\
Returns self if it contains no occurrence of substring. \n\
Note that both substring and replacement are treated as regular expressions. 
startsWith_1 = Returns true if self starts with the substring substring, false otherwise. 
substituteAll_2 = Substitutes all substrings substring in self by substring replacement and returns the resulting string. \n\
Returns self if it contains no occurrence of substring. \n\
Unlike the replaceAll operation, neither substring nor replacement are considered as regular expressions. 
substring_1 = Returns a substring of self, starting at startIndex (inclusive), until the end of self. \n\
Returns invalid when the startIndex is either negative, zero, or greater than self's length. \n\
Important: String indexes start at 1. \n\
Consequently the last character's index in a string is equal to the string's length. 
tokenize_1 = Returns a sequence containing all parts of self split around delimiters defined by the characters in String delim.
trim_0 = Removes all leading and trailing white space characters (tabulation, space, line feed, ...) of self. 

#Non-standard *EObject* operations
ancestors_0 = Returns a Sequence containing the full set of the receiver's ancestors. 
ancestors_1 = Returns the elements of the given type from the set of the receiver's ancestors as a Sequence. \n\
The returned sequence's elements are typed with the expected type (so there's no need to invoke oclAsType(oclType) on the sequence or its elements). 
eAllContents_0 = Returns the whole content tree of the receiver as a Sequence. 
eAllContents_1 = Returns the elements of the given type from the whole content tree of the receiver as a Sequence. \n\
The returned sequence's elements are typed with the expected type (so there's no need to invoke oclAsType(oclType) on the sequence or its elements). 
eContainer_1 = Returns the first ancestor of the given type, i.e. the first ancestor for which oclIsKindOf(oclType) evaluates to true. \n\
The returned element is typed with the expected type (so there's no need to invoke oclAsType(oclType) on it). \n\
Important: users of Acceleo 2.x should note that, contrary to what took place in acceleo 2.x, this operation never returns self even when self.oclIsKindOf(oclType) is true. 
eContents_1 = Returns a sequence of the direct children of self that are of the given type, i.e. the direct children for which oclIsKindOf(oclType) evaluates to true. \n\
The returned sequence's elements are typed with the expected type (so there's no need to invoke oclAsType(oclType) on the sequence or its elements). 
eGet_1 = This will fetch the value of the feature named featureName on the current Object. \n\
Return type can as well be a collection as a single value. 
eInverse_0 = Returns the set of all objects referencing self. 
eInverse_1 = Returns the elements of the given type from the set of the inverse references of self. \n\
The returned sequence's elements are typed with the expected type (so there's no need to invoke oclAsType(oclType) on the sequence or its elements). 
followingSiblings_0 = Returns a Sequence containing the full set of the receiver's following siblings. 
followingSiblings_1 = Returns the elements of the given type from the set of the receiver's following siblings as a Sequence. \n\
The returned sequence's elements are typed with the expected type (so there's no need to invoke oclAsType(oclType) on the sequence or its elements). 
precedingSiblings_0 = Returns a Sequence containing the full set of the receiver's preceding siblings. 
precedingSiblings_1 = Returns the elements of the given type from the set of the receiver's preceding siblings as a Sequence. \n\
The returned sequence's elements are typed with the expected type (so there's no need to invoke oclAsType(oclType) on the sequence or its elements). 
siblings_0 = Returns a Sequence containing the full set of the receiver's siblings. 
siblings_1 = Returns the elements of the given type from the set of the receiver's siblings as a Sequence. \n\
The returned sequence's elements are typed with the expected type (so there's no need to invoke oclAsType(oclType) on the sequence or its elements). 

#Non-standard *OclAny* operations
current_1 = Current(i : Integer) returns the value of the context index ranks above the current context. \n\
Current(t : OclType) will have the same effect as current(Integer) except that is will return the first context (self variable) of the given type, at or above the current one.
getProperty_1 = Returns the value of the property corresponding to the given key. \n\
Note that parameterized properties will be returned "as is" by this operation (parameters are not processed). 
getProperty_2 = Returns the value of the property corresponding to the given key, with its parameters substituted with the given values if any. 
getProperty_3 = Returns the value of the property corresponding to the given key from a properties file corresponding to the given name, with its parameters substituted with the given values if any. 
invoke_3 = Invokes the Java method method of class 'class' with the given arguments. \n\
This will return OclInvalid if the method cannot be called in any way (bad arguments, mispelled name, mispelled signature, encapsulation errors, ...). \n\
This is only intended to be used to call Java methods for now. 

#Non-standard *Collection* operations
sep_1 = Returns all elements from the source collection separated by an element composed of the String separator. 
filter_1 = Filters out of the collection all elements that are not instances of the given type or any of its subtypes. \n\
The returned collection is typed according to type. \n\
Makes it easier to write select(e | e.oclIsKindOf(type)).oclAsType(type). 
reverse_0 = Reverses the order of the collection: the last element becomes the first and vice-versa.  
lastIndexOf_1 = Returns the position of the given element in the collection it is applied to.  
